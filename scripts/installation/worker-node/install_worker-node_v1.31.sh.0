#!/bin/bash

# Ensure running as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run this script with 'su -' to become root."
    exit 1
fi

# Exit immediately if a command exits with a non-zero status.
set -e

# WARNING: This script has not been tested and is for TESTING PURPOSES ONLY!
# Running this script could potentially modify your system configuration or install software.
# Use at your own risk. Always review scripts before execution, especially in production environments.

# Continue with setup only if the user agrees
echo "WARNING: This script has not been tested and is for TESTING PURPOSES ONLY!"
echo "Running this script at this point WILL modify your system configuration, install a lot of software, and potentially harm your system."
echo "Do you wish to continue? (y/n)"
read -p "" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Script execution cancelled."
    exit 1
fi

# Update system and install necessary packages
apt update
apt install -y apt-transport-https ca-certificates curl

# Check if ufw is installed, if not, install it
if ! command -v ufw &> /dev/null; then
    echo "UFW is not installed. Installing now..."
    apt install -y ufw
fi

# Open necessary ports
ufw allow 22/tcp
ufw allow 6443/tcp
ufw allow 10250/tcp
ufw allow 10251/tcp
ufw allow 10252/tcp
ufw allow 30000:32767/tcp

# Ensure UFW is running and enable it
ufw --force enable

# Add Docker repository and install Docker
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update
apt install -y docker-ce docker-ce-cli containerd.io

# Start Docker service
systemctl start docker
systemctl enable docker

# Prepare for containerd installation
# Load necessary kernel modules
cat <<EOF | tee /etc/modules-load.d/containerd.conf 
overlay 
br_netfilter
EOF

modprobe overlay || true
modprobe br_netfilter || true

# Set system parameters
cat <<EOF | tee /etc/sysctl.d/99-kubernetes-k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1 
net.bridge.bridge-nf-call-ip6tables = 1 
EOF

sysctl --system

# Install containerd
apt install -y containerd.io

# Configure containerd
mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml

# Restart containerd service
systemctl restart containerd



# Disable swap
swapoff -a

# Comment out the swap entry in /etc/fstab, but only if it's not already commented
sed -i.bak '/^[^#].*\bswap\b/s/^/#/' /etc/fstab

# Set up hostname for the worker node
CURRENT_HOSTNAME=$(hostname)

echo "The current hostname of this server is: $CURRENT_HOSTNAME"
echo "Do you want to use this hostname? (y/n)"
read -p "" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Enter a custom hostname for this worker node:"
    read -p "Hostname: " WORKER_HOSTNAME
else
    WORKER_HOSTNAME=$CURRENT_HOSTNAME
fi

hostnamectl set-hostname "$WORKER_HOSTNAME"

# Ensure net.bridge.bridge-nf-call-iptables is set to 1
modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

# Configure iptables
iptables -P FORWARD ACCEPT

# Add Kubernetes repository
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

apt update

# Install the stable versions of kubeadm, kubelet, and kubectl
apt install -y kubeadm=1.31.0-* kubelet=1.31.0-* kubectl=1.31.0-*

apt-mark hold kubeadm kubelet kubectl

# Get the server's IP address
get_server_ip() {
    local ip=$(ip route get 1 | awk '{print $NF; exit}')
    if [ -z "$ip" ]; then
        ip=$(hostname -I | awk '{print $1}')
    fi
    if [ -z "$ip" ]; then
        echo "Could not determine server IP automatically. Please enter the server's IP address:"
        read -p "Server IP: " ip
    fi
    echo "$ip"
}

# Ask for the join command
echo "Enter the join command for this worker node:"
read -p "Join command: " JOIN_COMMAND

# Join the worker node to the cluster
$JOIN_COMMAND

# Calico documentation link: https://docs.tigera.io/calico/latest/getting-started/kubernetes/hardway/install-cni-plugin
#make install directory
mkdir -p /opt/cni/bin/


# Install the CNI plugin binaries for Calico
curl -L -o /opt/cni/bin/calico https://github.com/projectcalico/cni-plugin/releases/download/v3.25.0/calico-amd64
chmod 755 /opt/cni/bin/calico

curl -L -o /opt/cni/bin/calico-ipam https://github.com/projectcalico/cni-plugin/releases/download/v3.25.0/calico-ipam-amd64
chmod 755 /opt/cni/bin/calico-ipam

# Create the config directory for CNI
mkdir -p /etc/cni/net.d/

# Set up the kubeconfig for Calico CNI and save it in /etc/cni/net.d/
APISERVER=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')

kubectl config set-cluster kubernetes \
    --certificate-authority=/etc/kubernetes/pki/ca.crt \
    --embed-certs=true \
    --server=$APISERVER \
    --kubeconfig=/etc/cni/net.d/cni.kubeconfig

kubectl config set-credentials calico-cni \
    --client-certificate=/etc/kubernetes/pki/cni.crt \
    --client-key=/etc/kubernetes/pki/cni.key \
    --embed-certs=true \
    --kubeconfig=/etc/cni/net.d/cni.kubeconfig

kubectl config set-context default \
    --cluster=kubernetes \
    --user=calico-cni \
    --kubeconfig=/etc/cni/net.d/cni.kubeconfig

kubectl config use-context default --kubeconfig=/etc/cni/net.d/cni.kubeconfig

# Copy the cni.kubeconfig file into a file named calico-kubeconfig and change its permissions
cp /etc/cni/net.d/cni.kubeconfig /etc/cni/net.d/calico-kubeconfig
chmod 600 /etc/cni/net.d/calico-kubeconfig

# Write the CNI configuration to /etc/cni/net.d/10-calico.conflist
cat > /etc/cni/net.d/10-calico.conflist <<EOF
{
  "name": "k8s-pod-network",
  "cniVersion": "0.3.1",
  "plugins": [
    {
      "type": "calico",
      "log_level": "info",
      "datastore_type": "kubernetes",
      "mtu": 1500,
      "ipam": {
          "type": "calico-ipam"
      },
      "policy": {
          "type": "k8s"
      },
      "kubernetes": {
          "kubeconfig": "/etc/cni/net.d/calico-kubeconfig"
      }
    },
    {
      "type": "portmap",
      "snat": true,
      "capabilities": {"portMappings": true}
    }
  ]
}
EOF


echo "Worker node setup completed. The node should now be part of the Kubernetes cluster."
